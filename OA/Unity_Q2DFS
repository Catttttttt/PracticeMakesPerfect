# you can write to stdout for debugging purposes, e.g.
# print("this is a debug message")

'''
You are given an undirected graph consisting of N vertices, numbered from 1 to N, andM edges.
The graph is described by two arrays, A and B, both of length M. A pair (AlK), Blk), forK from 0 to M-1, describes an edge between vertex Alk and vertex Blkl.
Your task is to check whether the given graph contains a path from vertex 1 to vertex Ngoing through all of the vertices, one by one, in increasing order of their numbers. Allconnections on the path should be direct.
Write a function:
def solution(N，A，B)
that, given an integer N and two arrays A and B of M integers each, returns True ifthere exists a path from vertex 1 to N going through all vertices, one by one, inincreasing order, or False otherwise.
Examples:
1. Given N = 4, A = [1, 2, 4, 4, 3] and B = 2, 3, 1, 3, 1], the function should return TrueThere is a path (1 -> 2 - 3  4) using edges (1, 2), (2, 3) and (4, 3)
'''

def solution(N, A, B):
    # Implement your solution here
    graph = {}
    for a, b in zip(A, B):
        graph.setdefault(a, []).append(b)
        graph.setdefault(b, []).append(a)
    
    visited = [False] * (N + 1)
    
    def dfs(node, count):
        visited[node] = True
        count += 1
        
        if count == N:
            return True
        
        if node in graph:
            for neighbor in graph[node]:
                if not visited[neighbor] and neighbor == count + 1:
                    if dfs(neighbor, count):
                        return True
        
        visited[node] = False
        return False
    
    return dfs(1, 0)



